// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote_terminal_api.proto

package remote_terminal_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message .
type CommandRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b737496af7b73a91, []int{0}
}

func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

// The response message
type CommandResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b737496af7b73a91, []int{1}
}

func (m *CommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandResponse.Unmarshal(m, b)
}
func (m *CommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandResponse.Marshal(b, m, deterministic)
}
func (m *CommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponse.Merge(m, src)
}
func (m *CommandResponse) XXX_Size() int {
	return xxx_messageInfo_CommandResponse.Size(m)
}
func (m *CommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponse proto.InternalMessageInfo

func (m *CommandResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "remote_terminal_api.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "remote_terminal_api.CommandResponse")
}

func init() { proto.RegisterFile("remote_terminal_api.proto", fileDescriptor_b737496af7b73a91) }

var fileDescriptor_b737496af7b73a91 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x4a, 0xcd, 0xcd,
	0x2f, 0x49, 0x8d, 0x2f, 0x49, 0x2d, 0xca, 0xcd, 0xcc, 0x4b, 0xcc, 0x89, 0x4f, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc6, 0x22, 0xa5, 0xa4, 0xc4, 0xc5, 0xe7, 0x9c, 0x9f,
	0x9b, 0x9b, 0x98, 0x97, 0x12, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc0, 0xc5, 0x9c,
	0x9c, 0x9b, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x2a, 0xe9, 0x72, 0xf1, 0xc3,
	0xd5, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x71, 0x71, 0x14, 0x41, 0xd9, 0x50, 0x95,
	0x70, 0xbe, 0x51, 0x3e, 0x17, 0x5f, 0x10, 0xd8, 0xa6, 0x10, 0xa8, 0x45, 0x42, 0xb1, 0x5c, 0x7c,
	0xae, 0x15, 0xa9, 0xc9, 0xa5, 0x25, 0xa9, 0x50, 0x73, 0x84, 0x94, 0xf5, 0xb0, 0xb9, 0x13, 0xd5,
	0x25, 0x52, 0x2a, 0xf8, 0x15, 0x41, 0xac, 0x53, 0x62, 0x48, 0x62, 0x03, 0xfb, 0xcf, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x52, 0x28, 0x9d, 0x9a, 0xfc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteTerminalClient is the client API for RemoteTerminal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteTerminalClient interface {
	// Sends a command
	ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type remoteTerminalClient struct {
	cc *grpc.ClientConn
}

func NewRemoteTerminalClient(cc *grpc.ClientConn) RemoteTerminalClient {
	return &remoteTerminalClient{cc}
}

func (c *remoteTerminalClient) ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/remote_terminal_api.RemoteTerminal/ExecuteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteTerminalServer is the server API for RemoteTerminal service.
type RemoteTerminalServer interface {
	// Sends a command
	ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error)
}

func RegisterRemoteTerminalServer(s *grpc.Server, srv RemoteTerminalServer) {
	s.RegisterService(&_RemoteTerminal_serviceDesc, srv)
}

func _RemoteTerminal_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTerminalServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_terminal_api.RemoteTerminal/ExecuteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTerminalServer).ExecuteCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteTerminal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote_terminal_api.RemoteTerminal",
	HandlerType: (*RemoteTerminalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCommand",
			Handler:    _RemoteTerminal_ExecuteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote_terminal_api.proto",
}
